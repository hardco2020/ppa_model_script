AWSTemplateFormatVersion: 2010-09-09
Description: >-
  (spot bot) - The AWS CloudFormation template for deployment of the  PPA.
  Version v1.0.0 (Global)
Resources:
  RandomParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: /ppe/random
      Type: String
      Value: !Select
        - 2
        - !Split
          - /
          - !Ref "AWS::StackId"
      Description: Random parameter for creating s3
      Tags:
        Environment: DEV
  SageMakerParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: /ppe/config/arn
      Type: String
      Value: !GetAtt
        - SageMakerRole
        - Arn
      Description: Arn for sagemaker
      Tags:
        Environment: DEV
  S3BucketModelCreation:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - "-"
        - - ppebucket
          - !GetAtt
            - RandomParameter
            - Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  S3BucketPanoramaAppCreation:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - "-"
        - - panorama-app
          - !GetAtt
            - RandomParameter
            - Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  S3BucketExportEventCreation:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - "-"
        - - event
          - !GetAtt
            - RandomParameter
            - Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  S3BucketExportEventCreation:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - "-"
        - - export-event
          - !GetAtt
            - RandomParameter
            - Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  S3BucketAppGraphCreation:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - "-"
        - - app-graph
          - !GetAtt
            - RandomParameter
            - Value
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  S3BucketModelPretrainCreation:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - "-"
        - - pretraininput
          - !GetAtt
            - RandomParameter
            - Value
  S3BucketModelRetrainCreation:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - "-"
        - - retrainoutput
          - !GetAtt
            - RandomParameter
            - Value
  SageMakerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "sagemaker:*"
                Resource: "*"
              - Effect: Allow
                Action: "iam:*"
                Resource: "*"
              - Effect: Allow
                Action: "s3:*"
                Resource: "*"
              - Effect: Allow
                Action: "ecr:*"
                Resource: "*"
              - Effect: Allow
                Action: "lambda:*"
                Resource: "*"
  WebAppSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Join
        - "-"
        - - webapp-security-group
          - dev
      GroupDescription: Allow HTTP/HTTPS and SSH inbound and outbound traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  WebAppEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      InstanceId: !Ref BashInstance
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - webapp-eip
              - dev
  BashInstance:
    Type: "AWS::EC2::Instance"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT2H
    Properties:
      AvailabilityZone: !Select
        - "0"
        - !GetAZs
          Ref: "AWS::Region"
      SecurityGroupIds:
        - !Ref WebAppSecurityGroup
      KeyName: !Ref BashKey
      InstanceType: t2.micro
      ImageId: ami-0c802847a7dd848c0
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: io1
            Iops: "200"
            VolumeSize: "30"
      IamInstanceProfile: !Ref BashInstanceProfile
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              sudo yum update -y
            - |
              sudo yum install git -y
            - |
              sudo mkdir /home/ec2-user/ppa
            - |
              cd /home/ec2-user/ppa 
            - >
              sudo git clone https://github.com/hardco2020/ppa_model_script.git
              /home/ec2-user/ppa/
            - 'aws s3 cp training-input/ s3://'
            - !Ref S3BucketModelPretrainCreation
            - |
              / --recursive
            - 'aws s3 cp panorama-app/ s3://'
            - !Ref S3BucketPanoramaAppCreation
            - |
              / --recursive
            - '/opt/aws/bin/cfn-signal -e 0 --stack '
            - !Ref 'AWS::StackName'
            - ' --resource BashInstance '
            - ' --region '
            - !Ref 'AWS::Region'
            - |+

  BashInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref BashInstanceRole
  BashInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com
                - states.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:*"
                  - "ecr:*"
                  - "ecs:*"
                  - "s3:*"
                  - "lambda:*"
                  - "dynamodb:*"
                  - "ssm:*"
                Resource: "*"
  BashKey:
    Type: "AWS::EC2::KeyPair"
    Properties:
      KeyName: BashKey
  StateMachineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                  - 'ecr:*'
                  - 'ecs:*'
                  - 's3:*'
                  - 'lambda:*'
                  - 'dynamodb:*'
                  - 'ssm:*'
                Resource: '*'
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com
                - states.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                  - 'ecr:*'
                  - 'ecs:*'
                  - 's3:*'
                  - 'lambda:*'
                  - 'dynamodb:*'
                  - 'ssm:*'
                Resource: '*'
  MetricPictrueLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ImageUri: !Join 
          - ''
          - - !Ref 'AWS::AccountId'
            - >-
              .dkr.ecr.ap-southeast-1.amazonaws.com/python39-matplotlib-lambda:latest
      PackageType: Image
      FunctionName: metricToPicture
      Role: !GetAtt 
        - LambdaRole
        - Arn
      Timeout: 300
  CodeBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com
                - states.amazonaws.com
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:*'
                  - 'panorama:*'
                  - 's3:*'
                  - 'lambda:*'
                  - 'ssm:*'
                  - 'codebuild:*'
                  - 'logs:*'
                  - 'dynamodb:*'
                  - 'states:*'
                Resource: '*'
  CodeBuildSourceCredential:
    Type: 'AWS::CodeBuild::SourceCredential'
    Properties:
      AuthType: PERSONAL_ACCESS_TOKEN
      ServerType: GITHUB
      Token: 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
  BuildPanoramaApp:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: Build-Panorama-App
      Description: Build Panorama App with Panorama Cli
      ServiceRole: !GetAtt 
        - CodeBuildRole
        - Arn
      Artifacts:
        Type: no_artifacts
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: 'aws/codebuild/standard:5.0'
        PrivilegedMode: 'true'
      Source:
        BuildSpec: deployment/buildspec.yaml
        Auth:
          Resource: !Ref CodeBuildSourceCredential
          Type: OAUTH
        Location: 'https://github.com/hardco2020/aws-ppe.git'
        Type: GITHUB
      SourceVersion: dev/auto-deploy
  ModelStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString: !Sub
          - |
            {
              "StartAt": "StartTrainingJobGary",
              "States": {
                "StartTrainingJobGary": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "Payload.$": "$",
                    "FunctionName": "arn:aws:lambda:ap-southeast-1:${AccountId}:function:createTrainingJob-test:$LATEST"
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2
                    }
                  ],
                  "Next": "CheckTrainingJobStatus"
                },
                "CheckTrainingJobStatus": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "Payload.$": "$",
                    "FunctionName":"arn:aws:lambda:ap-southeast-1:${AccountId}:function:checkTrainingJobStatus-test:$LATEST"
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2
                    }
                  ],
                  "Next": "BranchTrainingJobStatus"
                },
                "BranchTrainingJobStatus": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.status",
                      "StringEquals": "Completed",
                      "Next": "UploadMetricsToS3"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "InProgress",
                      "Next": "WaitTrainingJob"
                    }
                  ],
                  "Default": "Fail"
                },
                "UploadMetricsToS3": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "Payload.$": "$",
                    "FunctionName": "arn:aws:lambda:ap-southeast-1:${AccountId}:function:ppaUploadMetricsToS3-test:$LATEST"
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2
                    }
                  ],
                  "Next": "MetricsToPicture"
                },
                "MetricsToPicture": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "FunctionName": "arn:aws:lambda:ap-southeast-1:${AccountId}:function:metricToPicture:$LATEST",
                    "Payload.$": "$"
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2
                    }
                  ],
                  "Next": "InvokeCodeBuild"
                },
                "InvokeCodeBuild": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
                  "Parameters": {
                    "FunctionName": "arn:aws:lambda:ap-southeast-1:${AccountId}:function:triggerCodeBuild-test:$LATEST",
                    "Payload": {
                      "token.$": "$$.Task.Token",
                      "otherInput.$": "$"
                    }
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2
                    }
                  ],
                  "End": true,
                  "ResultPath": null
                },
                "WaitTrainingJob": {
                  "Type": "Wait",
                  "Seconds": 10,
                  "Next": "CheckTrainingJobStatus"
                },
                "Fail": {
                  "Type": "Fail"
                }
              }
            }
          - AccountId: !Ref AWS::AccountId
            Resource : arn:aws-cn:states:::lambda:invoke
      RoleArn: !GetAtt StateMachineRole.Arn
  IotRule:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - iot.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:*"
                Resource: "*"
  IotTopic:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: ppeEvent
      TopicRulePayload:
        Actions:
          - DynamoDB:
              HashKeyField: CameraID
              HashKeyType: STRING
              HashKeyValue: ${CameraID}
              RangeKeyField: TimeStamp
              RangeKeyType: NUMBER
              RangeKeyValue: ${TimeStamp()}
              RoleArn: !GetAtt IotRule.Arn
              TableName: Event-test
        Description: Publish IOT topic for Panorama Devices to send alert message to Database
        Sql: SELECT * FROM 'ppe/event'
